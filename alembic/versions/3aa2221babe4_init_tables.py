"""init tables

Revision ID: 3aa2221babe4
Revises: 
Create Date: 2025-09-16 22:10:59.192716

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3aa2221babe4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', sa.DateTime(timezone=True), nullable=False),
    sa.Column('owner', sa.String(length=80), nullable=True),
    sa.Column('time_band', sa.String(length=40), nullable=True),
    sa.Column('sector', sa.String(length=40), nullable=True),
    sa.Column('size', sa.String(length=20), nullable=True),
    sa.Column('symbol', sa.String(length=20), nullable=True),
    sa.Column('symbols', sa.JSON(), nullable=True),
    sa.Column('pred_vol', sa.Float(), nullable=True),
    sa.Column('fake_rate', sa.Float(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('market_cap', sa.Float(), nullable=True),
    sa.Column('rec_action', sa.String(length=20), nullable=True),
    sa.Column('comment', sa.String(length=400), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_logs_owner'), 'logs', ['owner'], unique=False)
    op.create_index(op.f('ix_logs_sector'), 'logs', ['sector'], unique=False)
    op.create_index(op.f('ix_logs_size'), 'logs', ['size'], unique=False)
    op.create_index(op.f('ix_logs_symbol'), 'logs', ['symbol'], unique=False)
    op.create_index(op.f('ix_logs_time_band'), 'logs', ['time_band'], unique=False)
    op.create_index(op.f('ix_logs_ts_utc'), 'logs', ['ts_utc'], unique=False)
    op.drop_table('owner_settings')
    op.drop_table('default_model')
    op.drop_index(op.f('ix_anom_scope_ts'), table_name='anomaly_flags')
    op.drop_index(op.f('ix_anom_tag_ts'), table_name='anomaly_flags')
    op.drop_table('anomaly_flags')
    op.drop_index(op.f('idx_prediction_logs_owner'), table_name='prediction_logs')
    op.drop_index(op.f('ix_prediction_logs_created_at'), table_name='prediction_logs')
    op.drop_index(op.f('ix_prediction_logs_id'), table_name='prediction_logs')
    op.drop_index(op.f('ix_prediction_logs_user_id'), table_name='prediction_logs')
    op.drop_index(op.f('ix_prediction_logs_user_id_created_at'), table_name='prediction_logs')
    op.drop_table('prediction_logs')
    op.drop_index(op.f('ix_commod_symbol_ts'), table_name='commodities')
    op.drop_index(op.f('uq_commod_ts_symbol'), table_name='commodities')
    op.drop_table('commodities')
    op.drop_index(op.f('ix_market_key_ts'), table_name='market_indicators')
    op.drop_index(op.f('uq_market_ts_key'), table_name='market_indicators')
    op.drop_table('market_indicators')
    op.drop_index(op.f('ix_model_eval_id'), table_name='model_eval')
    op.drop_index(op.f('ix_model_eval_model_path'), table_name='model_eval')
    op.drop_table('model_eval')
    op.drop_index(op.f('ix_supply_scope_date'), table_name='supply_demand')
    op.drop_index(op.f('uq_supply_key'), table_name='supply_demand')
    op.drop_table('supply_demand')
    op.drop_index(op.f('uq_events_day'), table_name='events_day')
    op.drop_table('events_day')
    op.drop_table('playing_with_neon')
    op.drop_index(op.f('ux_owners_name'), table_name='owners')
    op.drop_table('owners')
    op.drop_index(op.f('ix_fx_symbol_ts'), table_name='fx_crypto')
    op.drop_index(op.f('uq_fx_ts_symbol'), table_name='fx_crypto')
    op.drop_table('fx_crypto')
    op.drop_index(op.f('ix_macro_indicator_date'), table_name='macro_daily')
    op.drop_index(op.f('uq_macro_daily_key_idx'), table_name='macro_daily')
    op.drop_table('macro_daily')
    op.drop_index(op.f('ix_news_sector_ts'), table_name='news_sentiment')
    op.drop_index(op.f('uq_news_sector_window_ts'), table_name='news_sentiment')
    op.drop_table('news_sentiment')
    op.drop_index(op.f('ix_model_meta_id'), table_name='model_meta')
    op.drop_index(op.f('ix_model_meta_model_path'), table_name='model_meta')
    op.drop_table('model_meta')
    op.drop_index(op.f('ix_user_settings_email'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_email_ts'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_owner'), table_name='user_settings')
    op.drop_index(op.f('ix_user_settings_owner_email_ts'), table_name='user_settings')
    op.drop_table('user_settings')
    op.add_column('users', sa.Column('roles', sa.JSON(), nullable=True))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'roles')
    op.create_table('user_settings',
    sa.Column('id', sa.TEXT(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('notify_enable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('notify_webhook_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notify_title', sa.TEXT(), server_default=sa.text("'VolAI 強シグナル'::text"), autoincrement=False, nullable=False),
    sa.Column('watch_symbols', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("btrim(owner::text) <> '??'::text", name=op.f('owner_not_placeholder')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_settings_pkey'))
    )
    op.create_index(op.f('ix_user_settings_owner_email_ts'), 'user_settings', ['owner', 'email', sa.literal_column('COALESCE(updated_at, created_at) DESC'), sa.literal_column('id DESC')], unique=False)
    op.create_index(op.f('ix_user_settings_owner'), 'user_settings', ['owner'], unique=False)
    op.create_index(op.f('ix_user_settings_email_ts'), 'user_settings', ['email', sa.literal_column('COALESCE(updated_at, created_at) DESC'), sa.literal_column('id DESC')], unique=False)
    op.create_index(op.f('ix_user_settings_email'), 'user_settings', ['email'], unique=False)
    op.create_table('model_meta',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pinned', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('model_meta_pkey')),
    sa.UniqueConstraint('model_path', name=op.f('uq_model_meta_model_path'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_model_meta_model_path'), 'model_meta', ['model_path'], unique=True)
    op.create_index(op.f('ix_model_meta_id'), 'model_meta', ['id'], unique=False)
    op.create_table('news_sentiment',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('sector', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('window_hours', sa.SMALLINT(), server_default=sa.text('6'), autoincrement=False, nullable=False),
    sa.Column('avg_score', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=False),
    sa.Column('pos_ratio', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('volume', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('symbols', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=32), server_default=sa.text("'fmp'::character varying"), autoincrement=False, nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('news_sentiment_pkey'))
    )
    op.create_index(op.f('uq_news_sector_window_ts'), 'news_sentiment', ['ts_utc', 'sector', 'window_hours'], unique=True)
    op.create_index(op.f('ix_news_sector_ts'), 'news_sentiment', ['sector', 'ts_utc'], unique=False)
    op.create_table('macro_daily',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=2), server_default=sa.text("'US'::character varying"), autoincrement=False, nullable=False),
    sa.Column('indicator', postgresql.ENUM('CPI', 'PPI', 'CORE_PCE', 'UNEMPLOYMENT', 'GDP', 'FFR', name='indicator_enum'), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(length=10), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('release_time_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('surprise', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=32), server_default=sa.text("'fmp'::character varying"), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('macro_daily_pkey'))
    )
    op.create_index(op.f('uq_macro_daily_key_idx'), 'macro_daily', ['date', 'country', 'indicator', 'period'], unique=True)
    op.create_index(op.f('ix_macro_indicator_date'), 'macro_daily', ['indicator', 'date'], unique=False)
    op.create_table('fx_crypto',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('corr_7d', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('fx_crypto_pkey'))
    )
    op.create_index(op.f('uq_fx_ts_symbol'), 'fx_crypto', ['ts_utc', 'symbol'], unique=True)
    op.create_index(op.f('ix_fx_symbol_ts'), 'fx_crypto', ['symbol', 'ts_utc'], unique=False)
    op.create_table('owners',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('name', name='owners_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ux_owners_name'), 'owners', ['name'], unique=True)
    op.create_table('playing_with_neon',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.REAL(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('playing_with_neon_pkey'))
    )
    op.create_table('events_day',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=8), server_default=sa.text("'US'::character varying"), autoincrement=False, nullable=False),
    sa.Column('has_cpi', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('has_fomc', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('earnings_total', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('earnings_by_sector', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('events_day_pkey'))
    )
    op.create_index(op.f('uq_events_day'), 'events_day', ['date', 'region'], unique=True)
    op.create_table('supply_demand',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('scope', postgresql.ENUM('symbol', 'sector', 'market', name='scope_enum'), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('short_interest', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('days_to_cover', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('float_shares', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('pressure_score', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('supply_demand_pkey'))
    )
    op.create_index(op.f('uq_supply_key'), 'supply_demand', ['date', 'scope', 'key'], unique=True)
    op.create_index(op.f('ix_supply_scope_date'), 'supply_demand', ['scope', 'date'], unique=False)
    op.create_table('model_eval',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('ran_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('metric_mae', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('n_samples', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('triggered_by', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('note', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('new_model_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('promoted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('model_eval_pkey'))
    )
    op.create_index(op.f('ix_model_eval_model_path'), 'model_eval', ['model_path'], unique=False)
    op.create_index(op.f('ix_model_eval_id'), 'model_eval', ['id'], unique=False)
    op.create_table('market_indicators',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('market_indicators_pkey'))
    )
    op.create_index(op.f('uq_market_ts_key'), 'market_indicators', ['ts_utc', 'key'], unique=True)
    op.create_index(op.f('ix_market_key_ts'), 'market_indicators', ['key', 'ts_utc'], unique=False)
    op.create_table('commodities',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=32), server_default=sa.text("'fmp'::character varying"), autoincrement=False, nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('commodities_pkey'))
    )
    op.create_index(op.f('uq_commod_ts_symbol'), 'commodities', ['ts_utc', 'symbol'], unique=True)
    op.create_index(op.f('ix_commod_symbol_ts'), 'commodities', ['symbol', 'ts_utc'], unique=False)
    op.create_table('prediction_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rci', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('atr', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('vix', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('predicted_volatility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model_path', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('sector', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('time_window', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('size_category', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('comment', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('actual_volatility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_error', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('owner', sa.TEXT(), server_default=sa.text("'共用'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner'], ['owners.name'], name=op.f('prediction_logs_owner_fk'), onupdate='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('prediction_logs_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('prediction_logs_pkey'))
    )
    op.create_index(op.f('ix_prediction_logs_user_id_created_at'), 'prediction_logs', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_prediction_logs_user_id'), 'prediction_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_prediction_logs_id'), 'prediction_logs', ['id'], unique=False)
    op.create_index(op.f('ix_prediction_logs_created_at'), 'prediction_logs', ['created_at'], unique=False)
    op.create_index(op.f('idx_prediction_logs_owner'), 'prediction_logs', ['owner'], unique=False)
    op.create_table('anomaly_flags',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('ts_utc', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('scope', postgresql.ENUM('symbol', 'sector', 'market', name='scope_enum'), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('tag', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('score', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('level', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('anomaly_flags_pkey'))
    )
    op.create_index(op.f('ix_anom_tag_ts'), 'anomaly_flags', ['tag', 'ts_utc'], unique=False)
    op.create_index(op.f('ix_anom_scope_ts'), 'anomaly_flags', ['scope', 'ts_utc'], unique=False)
    op.create_table('default_model',
    sa.Column('owner', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner'], ['owners.name'], name=op.f('default_model_owner_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('owner', name=op.f('default_model_pkey'))
    )
    op.create_table('owner_settings',
    sa.Column('owner', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('params', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('default_model', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner'], ['owners.name'], name=op.f('owner_settings_owner_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('owner', name=op.f('owner_settings_pkey'))
    )
    op.drop_index(op.f('ix_logs_ts_utc'), table_name='logs')
    op.drop_index(op.f('ix_logs_time_band'), table_name='logs')
    op.drop_index(op.f('ix_logs_symbol'), table_name='logs')
    op.drop_index(op.f('ix_logs_size'), table_name='logs')
    op.drop_index(op.f('ix_logs_sector'), table_name='logs')
    op.drop_index(op.f('ix_logs_owner'), table_name='logs')
    op.drop_table('logs')
    # ### end Alembic commands ###
