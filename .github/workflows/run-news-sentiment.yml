name: run-news-sentiment

on:
  schedule:
    - cron: "*/5 * * * *"   # 5分おき起動（ゲートで 20:00 / 07:30 だけ実行）
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: run-news-sentiment-${{ github.ref }}
      cancel-in-progress: true

    steps:
      # ── 実行ゲート：トロント 20:00〜20:04 / 07:30〜07:34 だけ進む ──
      - name: Gate by Toronto 20:00 or 07:30
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          echo "UTC:      $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
          echo "Toronto:  $(TZ=America/Toronto date '+%Y-%m-%d %H:%M:%S %Z')"
          hr="$(TZ=America/Toronto date +%H)"
          min="$(TZ=America/Toronto date +%M)"
          echo "Local(Toronto) hr=$hr min=$min"
          if { [ "$hr" = "20" ] && [ "$min" -ge 0 ] && [ "$min" -le 4 ]; } || \
             { [ "$hr" = "07" ] && [ "$min" -ge 30 ] && [ "$min" -le 34 ]; }
          then
            echo "run=true"  >> "$GITHUB_OUTPUT"
            echo "It's within the execution window. Proceed."
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "Outside window; skip."
          fi

      - uses: actions/checkout@v4
        if: steps.gate.outputs.run == 'true'

      - uses: actions/setup-python@v5
        if: steps.gate.outputs.run == 'true'
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Ensure jq
        if: steps.gate.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # ── ヘルスチェック：本文とHTTPコードを分離して扱う ──
      - name: Health check with retry
        if: steps.gate.outputs.run == 'true'
        id: health
        shell: bash
        env:
          BASE: ${{ secrets.NEWS_API_BASE }}   # 例: https://api.example.com
        run: |
          set -euo pipefail
          : "${BASE:?NEWS_API_BASE secret is required}"
          echo "Health check with retry..."
          code="000"
          for i in {1..6}; do
            body_file="$(mktemp)"
            code_file="$(mktemp)"
            curl -sS --connect-timeout 5 --max-time 10 \
              -H 'Accept: application/json' \
              -o "$body_file" -w '%{http_code}' \
              "$BASE/health" | tee "$code_file" >/dev/null || true
            code="$(cat "$code_file" || true)"
            echo " try #$i: /health => ${code:-000}"
            if [ "${code:-000}" = "200" ]; then
              echo "ok"
              break
            fi
            sleep 5
          done
          if [ "${code:-000}" != "200" ]; then
            echo "::error::Health check failed. Response body follows:"
            head -c 800 "$body_file" || true
            exit 1
          fi

      # ── ログイン：本文(JSON)とコードを分離。JSON検証＆.token 抽出。失敗時は本文を表示 ──
      - name: Login and get token (robust)
        if: steps.gate.outputs.run == 'true'
        id: auth
        shell: bash
        env:
          BASE: ${{ secrets.NEWS_API_BASE }}
          USER: ${{ secrets.NEWS_USER }}
          PASS: ${{ secrets.NEWS_PASS }}
        run: |
          set -euo pipefail
          : "${BASE:?NEWS_API_BASE secret is required}"
          : "${USER:?NEWS_USER secret is required}"
          : "${PASS:?NEWS_PASS secret is required}"

          body_file="$(mktemp)"
          code_file="$(mktemp)"

          curl -sS --retry 5 --retry-delay 2 --connect-timeout 5 --max-time 20 \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d "{\"user\":\"$USER\",\"pass\":\"$PASS\"}" \
            -o "$body_file" -w '%{http_code}' \
            "$BASE/login" | tee "$code_file" >/dev/null || true

          code="$(cat "$code_file" || true)"
          echo "HTTP code: ${code:-000}"

          # まず JSON として妥当かチェック
          if ! jq -e . "$body_file" >/dev/null 2>&1; then
            echo "::error::Login response is not JSON. Body follows:"
            head -c 800 "$body_file" || true
            exit 1
          fi

          # .token があるか
          if ! jq -e 'has("token")' "$body_file" >/dev/null 2>&1; then
            echo "::error::Login JSON has no .token. Body follows:"
            cat "$body_file" | jq . || cat "$body_file"
            exit 1
          fi

          # HTTP 200 以外ならエラーボディを出して終了
          if [ "${code:-000}" != "200" ]; then
            echo "::error::Login HTTP ${code:-000}. Body follows:"
            cat "$body_file" | jq . || cat "$body_file"
            exit 1
          fi

          token="$(jq -er '.token' "$body_file")"
          echo "token acquired"
          echo "token=$token" >> "$GITHUB_OUTPUT"

      - name: Install deps
        if: steps.gate.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare .env
        if: steps.gate.outputs.run == 'true'
        run: |
          echo FMP_API_KEY=${{ secrets.FMP_API_KEY }} >> .env
          echo FRED_API_KEY=${{ secrets.FRED_API_KEY }} >> .env
          echo ALIGN_CALENDAR_UNION_FFILL=1 >> .env

      - name: Run pipeline
        if: steps.gate.outputs.run == 'true'
        shell: bash
        env:
          API_BASE: ${{ secrets.NEWS_API_BASE }}
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          set -euo pipefail
          echo "Nightly job running..."
          # 例：API実行（必要に応じて差し替え）
          # curl -sS -H "Authorization: Bearer $TOKEN" "$API_BASE/news/sentiment/run"
          # python -m pipelines.news_sentiment --base "$API_BASE" --token "$TOKEN"
